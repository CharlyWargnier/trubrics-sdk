import importlib.util
import json
import sys
from pathlib import Path

import typer
from rich import print as rprint

from trubrics.exceptions import MissingConfigPathError, MissingTrubricRunFileError
from trubrics.utils.trubrics_manager_connector import make_request
from trubrics.validators.run import run_trubric
from trubrics.validators.run_context import TrubricRun

app = typer.Typer()


@app.command()
def run(
    save_ui: bool = False,
    trubric_config_path: str = typer.Option(
        ".",
        prompt=(
            "Enter the path to your trubric config .json file (this file can be generated by running `trubrics init`)."
            " The default path is"
        ),
    ),
    trubric_output_file_path: str = typer.Option(
        ".", prompt="Enter the path to save your output trubric file. The default path is"
    ),
    trubric_output_file_name: str = typer.Option(
        "my_new_trubric.json", prompt="Enter the file name of your output trubric file. The default file name is"
    ),
):
    """The CLI `trubrics run` command for running trubrics.

    Example:
        ```
        trubrics run <trubric_init_path>.py
        ```

    Args:
        trubric_init_path: a path towards a .py file that initialises data, model and trubrics contexts.
                           This file must contain the TrubricRun object that holds all contexts to run a
                           trubric. The TrubricRun object must be set to a variable `RUN_CONTEXT` to be recognised.
                           For example `RUN_CONTEXT=TrubricRun(...)`.

    """
    trubric_config_file_path = Path(trubric_config_path) / ".trubrics_config.json"
    if not trubric_config_file_path.exists():
        raise MissingConfigPathError(
            f"The trubric configuration file '{trubric_config_file_path}' has not been found. Run `trubrics init` to"
            " create file."
        )
    with open(trubric_config_file_path, "r") as file:
        trubrics_config = json.load(file)
    trubric_run_path = trubrics_config["trubric_run_path"]

    tc = _import_module(module_path=trubric_run_path)
    if hasattr(tc, "RUN_CONTEXT"):
        if isinstance(tc.RUN_CONTEXT, TrubricRun):
            tc = tc.RUN_CONTEXT
        else:
            raise TypeError("'RUN_CONTEXT' attribute must be of type TrubricRun.")
    else:
        raise AttributeError("Trubrics config python module must contain an attribute 'RUN_CONTEXT'.")

    typer.echo(
        typer.style(
            f"Running trubric from file '{trubric_run_path}' with model '{tc.model_context.name}' and dataset"
            f" '{tc.data_context.name}'.",
            fg=typer.colors.BLUE,
        )
    )
    all_validation_results = run_trubric(
        data_context=tc.data_context,
        model_context=tc.model_context,
        trubric=tc.trubric_context,
        custom_validator=tc.custom_validator,
    )
    validations = []
    for validation_result in all_validation_results:
        validation_type, severity, validation_context_result = validation_result
        validations.append(validation_context_result)

        message_start = f"{validation_type} - {severity.upper()}"
        completed_dots = (100 - len(message_start)) * "."
        if validation_context_result.outcome == "pass":
            ending = typer.style("PASSED", fg=typer.colors.GREEN, bold=True)
        else:
            ending = typer.style("FAILED", fg=typer.colors.WHITE, bg=typer.colors.RED)
        message = typer.style(message_start, bold=True) + completed_dots + ending
        typer.echo(message)

    # save new trubric .json
    new_trubric_context = tc.trubric_context
    new_trubric_context.validations = validations
    new_trubric_context.save_local(path=trubric_output_file_path, file_name=trubric_output_file_name)
    typer.echo(
        typer.style(
            f"New trubric context saved locally to: '{Path(trubric_output_file_path) / trubric_output_file_name}'",
            fg=typer.colors.GREEN,
        )
    )

    # save new trubric to ui
    if save_ui is True:
        if "user_id" in trubrics_config.keys():
            new_trubric_context.save_ui(user_id=trubrics_config["user_id"])
            typer.echo(
                typer.style(
                    "New trubric context saved to the trubrics UI.",
                    fg=typer.colors.GREEN,
                )
            )
        else:
            typer.echo(
                typer.style(
                    "ERROR: You must authenticate with the trubrics manager UI by running `trubrics init` to save"
                    " trubrics runs to the UI.",
                    fg=typer.colors.RED,
                )
            )


@app.command()
def init(
    trubric_config_path: str = typer.Option(
        ".", prompt="Enter the path to your trubric config .json file. The default path is"
    ),
    trubric_run_path: str = typer.Option(
        ..., prompt="Enter the path to your trubric run .py file (e.g. examples/trubric_run.py)"
    ),
):
    """The CLI `trubrics init` command for initialising trubrics config."""
    save_ui = typer.confirm("Do you want authenticate with the trubrics UI?")
    if save_ui:
        uid = typer.prompt("Enter your User ID (generated in the trubrics manager)")
        url = "https://trubrics-api-efmcopwrwa-ew.a.run.app"

        res = make_request(f"{url}/api/is_user/{uid}", headers={"Content-Type": "application/json"})
        res = json.loads(res)
        if "is_user" in res.keys():
            message = typer.style(res["msg"], fg=typer.colors.RED, bold=True)
            typer.echo(message)
            raise typer.Abort()
        typer.echo(
            typer.style(
                "Trubrics config set and user authenticated with the trubrics manager UI:",
                fg=typer.colors.GREEN,
                bold=True,
            )
        )
    else:
        typer.echo(
            typer.style(
                "Trubrics config set without trubrics manager UI authentication:", fg=typer.colors.GREEN, bold=True
            )
        )
        res = {}

    if not Path(trubric_run_path).exists() or not trubric_run_path.endswith(".py"):
        raise MissingTrubricRunFileError("Trubric run file path does not exist or is not a .py file.")

    res["trubric_run_path"] = trubric_run_path

    rprint(res)
    with open(
        Path(trubric_config_path) / ".trubrics_config.json",
        "w",
    ) as file:
        file.write(json.dumps(res, indent=4))


def _import_module(module_path: str):
    try:
        spec = importlib.util.spec_from_file_location("module.name", module_path)
        lib = importlib.util.module_from_spec(spec)  # type: ignore
        sys.modules["module.name"] = lib
        spec.loader.exec_module(lib)  # type: ignore
    except FileNotFoundError as e:
        raise e
    return lib


if __name__ == "__main__":
    app()
